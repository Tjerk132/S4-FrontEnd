{"version":3,"sources":["ProductLogic.js"],"names":["ProductLogic","productDao","ProductDao","categoryLogic","CategoryLogic","newProduct","cartItems","checkExistingBasket","existsInBasket","productToBeRemoved","i","length","cartItem","product","id","quantity","index","indexOf","splice","products","totalCosts","forEach","price","toFixed","productIds","push","totalQuantity","p","exists","item","ShoppingCartItem","getProductById","data","category","toReadableCategory","addProduct","updateProduct","getProductCategories","categories","map","x","toRestCategory","getProductsByCategory","name","getProductsByName","removeBasketProductsFromStore","getTopRatedProducts"],"mappings":"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","sourceRoot":"C:\\Users\\Tjerk_2\\Desktop\\S4 - Vue FrontEnd\\logic\\","sourcesContent":["import ProductDao from '@/data/ProductDao.js';\r\nimport ShoppingCartItem from'@/models/ShoppingCartitem.js';\r\n\r\nimport CategoryLogic from '@/logic/CategoryLogic.js';\r\n\r\nexport default class ProductLogic {\r\n\r\n    constructor() {\r\n        this.productDao = new ProductDao();\r\n        this.categoryLogic = new CategoryLogic();\r\n    }\r\n\r\n    addToShoppingCart(newProduct, cartItems) {\r\n        \r\n        cartItems = this.checkExistingBasket(cartItems);\r\n\r\n        cartItems = this.existsInBasket(newProduct, cartItems);\r\n\r\n        return cartItems;\r\n    } \r\n\r\n    removeFromShoppingCart(productToBeRemoved, cartItems) {\r\n        \r\n        cartItems = this.checkExistingBasket(cartItems);\r\n        //remove product from shopping cart\r\n        for(let i = 0; i < cartItems.length; i++) {\r\n            let cartItem = cartItems[i];\r\n            let product = cartItem.product;\r\n\r\n            if(product.id == productToBeRemoved.id) {\r\n                if(cartItem.quantity > 0) {\r\n                    //lower quantity for chosen product\r\n                    cartItem.quantity--;\r\n                }\r\n                if(cartItem.quantity == 0) {\r\n                    //remove cartItem completely\r\n                    let index = cartItems.indexOf(cartItem);\r\n                    cartItems.splice(index, 1);\r\n                }\r\n            }  \r\n        \r\n        }\r\n        return cartItems;\r\n    }\r\n\r\n    checkExistingBasket(products) {\r\n        //create new basket if user doesn't have one  \r\n        return products == null ? [] : products;\r\n    }\r\n\r\n    calculateBasketCosts(cartItems) {\r\n        let totalCosts = 0;\r\n        cartItems.forEach(cartItem => {\r\n            for(let i = 0; i < cartItem.quantity; i++) {\r\n\r\n                let product = cartItem.product;\r\n                totalCosts += product.price;\r\n            }\r\n        });\r\n        return totalCosts.toFixed(2);\r\n    }\r\n\r\n    getProductIds(cartItems) {\r\n\r\n        let productIds = [];\r\n\r\n        if(cartItems.length) {\r\n            cartItems.forEach(cartItem => {\r\n                \r\n                let product = cartItem.product;\r\n                for(let i = 0; i < cartItem.quantity; i++) {\r\n                    //add each product individually\r\n                    productIds.push(product.id);\r\n                }\r\n            });\r\n            return productIds;\r\n        }\r\n        else return [];\r\n    }\r\n\r\n    getTotalQuantity(cartItems) {\r\n        let totalQuantity = 0;\r\n        cartItems.forEach(cartItem => {\r\n            totalQuantity += cartItem.quantity;\r\n        });\r\n        return totalQuantity;\r\n    }\r\n\r\n    existsInBasket(p, cartItems) {\r\n        let exists = false;\r\n        cartItems.forEach(item => {\r\n            let product = item.product;\r\n            if(p.id == product.id) {\r\n                item.quantity++;\r\n                exists = true;\r\n                return cartItems;\r\n            }\r\n        }); \r\n        //still gets triggered otherwise somehow\r\n        if(!exists) {\r\n            cartItems.push(new ShoppingCartItem(p, 1));\r\n            return cartItems;\r\n        }\r\n        else return cartItems;\r\n    }\r\n    \r\n    async getProductById(id) {\r\n        let data = await this.productDao.getProductById(id);\r\n        //category is saved as enum object\r\n        let category = data.category.category;\r\n        category = this.categoryLogic.toReadableCategory(category);\r\n\r\n        let product = data;\r\n        product.category = category;\r\n\r\n        return product;   \r\n    }\r\n\r\n    async addProduct(product) {\r\n        return this.productDao.addProduct(product);\r\n    }\r\n\r\n    async updateProduct(product) {\r\n        return this.productDao.updateProduct(product);\r\n    }\r\n\r\n    async getProductCategories() {\r\n        let data = await this.productDao.getProductCategories();\r\n\r\n        let categories = data.map(x => x.category);\r\n\r\n        return categories.map(x => x = this.categoryLogic.toReadableCategory(x))\r\n    }\r\n\r\n    async getProductsByCategory(category) {\r\n        category = this.categoryLogic.toRestCategory(category);\r\n\r\n        return await this.productDao.getProductsByCategory(category);\r\n    }\r\n\r\n    async getProductsByName(name) {\r\n        return this.productDao.getProductsByName(name);\r\n    }\r\n\r\n    async removeBasketProductsFromStore(products) {\r\n        return this.productDao.removeBasketProductsFromStore(products);\r\n    }\r\n\r\n    async getTopRatedProducts() {\r\n        return this.productDao.getTopRatedProducts();\r\n    }\r\n}"]}