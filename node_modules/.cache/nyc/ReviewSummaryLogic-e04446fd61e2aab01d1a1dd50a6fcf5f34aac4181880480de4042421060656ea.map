{"version":3,"sources":["ReviewSummaryLogic.js"],"names":["ReviewSummaryLogic","reviews","totalRating","forEach","review","starRating","length","toFixed","maxRating","reviewCount","reviewSummary","i","count","filter","x","push","ReviewSummaryItem","calculateRatingPercentages","percentage","quantity"],"mappings":";;;;;;;AAAA;;;;;;;;;;IAEqBA,kB;;;;;;;iCAEJC,O,EAAS;AAElB,UAAIC,WAAW,GAAG,CAAlB;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgB,UAAAC,MAAM,EAAI;AACtBF,QAAAA,WAAW,IAAIE,MAAM,CAACC,UAAtB;AACH,OAFD;AAGA,aAAO,CAACH,WAAW,GAAGD,OAAO,CAACK,MAAvB,EAA+BC,OAA/B,CAAuC,CAAvC,CAAP;AACH;;;yCAEoBC,S,EAAWP,O,EAASQ,W,EAAa;AAClD,UAAIC,aAAa,GAAG,EAApB;;AADkD,iCAE1CC,CAF0C;AAI9C,YAAIC,KAAK,GAAGX,OAAO,CAACY,MAAR,CAAe,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACT,UAAF,IAAgBM,CAApB;AAAA,SAAhB,EAAuCL,MAAnD;AACAI,QAAAA,aAAa,CAACK,IAAd,CAAmB,IAAIC,6BAAJ,CAAsBL,CAAtB,EAAyBC,KAAzB,CAAnB;AAL8C;;AAElD,WAAI,IAAID,CAAC,GAAGH,SAAZ,EAAuBG,CAAC,GAAG,CAA3B,EAA8BA,CAAC,EAA/B,EAAmC;AAAA,cAA3BA,CAA2B;AAIlC;;AACDD,MAAAA,aAAa,GAAG,KAAKO,0BAAL,CAAgCP,aAAhC,EAA+CD,WAA/C,CAAhB;AACA,aAAOC,aAAP;AACH;;;+CAE0BA,a,EAAeD,W,EAAa;AAEnDC,MAAAA,aAAa,CAACP,OAAd,CAAsB,UAAAa,iBAAiB,EAAI;AACvC,YAAIE,UAAU,GAAIF,iBAAiB,CAACG,QAAlB,GAA6BV,WAA9B,GAA6C,GAA9D;AACAO,QAAAA,iBAAiB,CAACE,UAAlB,GAA+BA,UAA/B;AACH,OAHD;AAIA,aAAOR,aAAP;AACH","sourceRoot":"C:\\Users\\Tjerk_2\\Desktop\\S4 - Vue FrontEnd\\logic\\","sourcesContent":["import ReviewSummaryItem from '@/models/ReviewSummaryItem.js';\r\n\r\nexport default class ReviewSummaryLogic {\r\n\r\n    getAvgRating(reviews) {\r\n\r\n        let totalRating = 0;\r\n        reviews.forEach(review => {\r\n            totalRating += review.starRating;\r\n        });\r\n        return (totalRating / reviews.length).toFixed(1);\r\n    }\r\n\r\n    calculatePercentages(maxRating, reviews, reviewCount) {\r\n        let reviewSummary = [];\r\n        for(let i = maxRating; i > 0; i--) {\r\n\r\n            let count = reviews.filter(x => x.starRating == i).length;\r\n            reviewSummary.push(new ReviewSummaryItem(i, count));\r\n        }\r\n        reviewSummary = this.calculateRatingPercentages(reviewSummary, reviewCount);\r\n        return reviewSummary;\r\n    }\r\n\r\n    calculateRatingPercentages(reviewSummary, reviewCount) {\r\n\r\n        reviewSummary.forEach(ReviewSummaryItem => {\r\n            let percentage = (ReviewSummaryItem.quantity / reviewCount) * 100;\r\n            ReviewSummaryItem.percentage = percentage;\r\n        });\r\n        return reviewSummary;\r\n    }\r\n\r\n}"]}